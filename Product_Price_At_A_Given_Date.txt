1164. Product Price at a Given Date
Medium
Topics
Companies
SQL Schema
Table: Products

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+
(product_id, change_date) is the primary key (combination of columns with unique values) of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.
 

Write a solution to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

Return the result table in any order.

The result format is in the following example.

 

Example 1:

Input: 
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+
Output: 
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+


Solution 1:

# Write your MySQL query statement below
SELECT
  UniqueProductIds.product_id,
  IFNULL(LastChangedPrice.new_price, 10) AS price
FROM
  (
    SELECT DISTINCT
      product_id
    FROM
      Products
  ) AS UniqueProductIds
  LEFT JOIN (
    SELECT
      p1.product_id,
      p1.new_price
    FROM
      Products p1
      JOIN (
        SELECT
          product_id,
          MAX(change_date) AS max_change_date
        FROM
          Products
        WHERE
          change_date <= '2019-08-16'
        GROUP BY
          product_id
      ) AS p2 ON p1.product_id = p2.product_id AND p1.change_date = p2.max_change_date
  ) AS LastChangedPrice ON UniqueProductIds.product_id = LastChangedPrice.product_id;



Solution 2:

# Write your MySQL query statement below
SELECT
    product_id,
    10 AS price
FROM
    Products
GROUP BY
    product_id
HAVING
    MIN(change_date) > '2019-08-16'

UNION ALL

SELECT
    product_id,
    new_price AS price
FROM
    Products
WHERE
    (product_id, change_date) IN (
        SELECT
            product_id,
            MAX(change_date)
        FROM
            Products
        WHERE
            change_date <= '2019-08-16'
        GROUP BY
            product_id
    );


Solution 3:

# Write your MySQL query statement below
SELECT DISTINCT 
    a.product_id, 
    IFNULL(temp.new_price, 10) AS price
FROM 
    products AS a
LEFT JOIN (
    SELECT * 
    FROM products 
    WHERE (product_id, change_date) IN (
        SELECT product_id, MAX(change_date) 
        FROM products 
        WHERE change_date <= '2019-08-16' 
        GROUP BY product_id
    )
) AS temp ON a.product_id = temp.product_id;
